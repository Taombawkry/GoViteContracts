// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type AccountType string

const (
	AccountTypeSocialLogin AccountType = "social_login"
	AccountTypeStandard    AccountType = "standard"
	AccountTypeSiwe        AccountType = "siwe"
)

func (e *AccountType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AccountType(s)
	case string:
		*e = AccountType(s)
	default:
		return fmt.Errorf("unsupported scan type for AccountType: %T", src)
	}
	return nil
}

type NullAccountType struct {
	AccountType AccountType
	Valid       bool // Valid is true if AccountType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAccountType) Scan(value interface{}) error {
	if value == nil {
		ns.AccountType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AccountType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAccountType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AccountType), nil
}

type AddressType string

const (
	AddressTypeWallet       AddressType = "wallet"
	AddressTypeDistribution AddressType = "distribution"
)

func (e *AddressType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AddressType(s)
	case string:
		*e = AddressType(s)
	default:
		return fmt.Errorf("unsupported scan type for AddressType: %T", src)
	}
	return nil
}

type NullAddressType struct {
	AddressType AddressType
	Valid       bool // Valid is true if AddressType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAddressType) Scan(value interface{}) error {
	if value == nil {
		ns.AddressType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AddressType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAddressType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AddressType), nil
}

type EmailActions string

const (
	EmailActionsVerifyAccount EmailActions = "verify_account"
	EmailActionsResetPassword EmailActions = "reset_password"
)

func (e *EmailActions) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EmailActions(s)
	case string:
		*e = EmailActions(s)
	default:
		return fmt.Errorf("unsupported scan type for EmailActions: %T", src)
	}
	return nil
}

type NullEmailActions struct {
	EmailActions EmailActions
	Valid        bool // Valid is true if EmailActions is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEmailActions) Scan(value interface{}) error {
	if value == nil {
		ns.EmailActions, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EmailActions.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEmailActions) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EmailActions), nil
}

type EventMode string

const (
	EventModePhysical EventMode = "physical"
	EventModeVirtual  EventMode = "virtual"
)

func (e *EventMode) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventMode(s)
	case string:
		*e = EventMode(s)
	default:
		return fmt.Errorf("unsupported scan type for EventMode: %T", src)
	}
	return nil
}

type NullEventMode struct {
	EventMode EventMode
	Valid     bool // Valid is true if EventMode is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventMode) Scan(value interface{}) error {
	if value == nil {
		ns.EventMode, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventMode.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventMode) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventMode), nil
}

type EventPartName string

const (
	EventPartNameDetails       EventPartName = "details"
	EventPartNamePayments      EventPartName = "payments"
	EventPartNameTickets       EventPartName = "tickets"
	EventPartNameCollaborators EventPartName = "collaborators"
)

func (e *EventPartName) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventPartName(s)
	case string:
		*e = EventPartName(s)
	default:
		return fmt.Errorf("unsupported scan type for EventPartName: %T", src)
	}
	return nil
}

type NullEventPartName struct {
	EventPartName EventPartName
	Valid         bool // Valid is true if EventPartName is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventPartName) Scan(value interface{}) error {
	if value == nil {
		ns.EventPartName, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventPartName.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventPartName) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventPartName), nil
}

type EventPartPermission string

const (
	EventPartPermissionView EventPartPermission = "view"
	EventPartPermissionEdit EventPartPermission = "edit"
)

func (e *EventPartPermission) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventPartPermission(s)
	case string:
		*e = EventPartPermission(s)
	default:
		return fmt.Errorf("unsupported scan type for EventPartPermission: %T", src)
	}
	return nil
}

type NullEventPartPermission struct {
	EventPartPermission EventPartPermission
	Valid               bool // Valid is true if EventPartPermission is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventPartPermission) Scan(value interface{}) error {
	if value == nil {
		ns.EventPartPermission, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventPartPermission.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventPartPermission) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventPartPermission), nil
}

type EventPrivacy string

const (
	EventPrivacyPublic  EventPrivacy = "public"
	EventPrivacyPrivate EventPrivacy = "private"
)

func (e *EventPrivacy) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventPrivacy(s)
	case string:
		*e = EventPrivacy(s)
	default:
		return fmt.Errorf("unsupported scan type for EventPrivacy: %T", src)
	}
	return nil
}

type NullEventPrivacy struct {
	EventPrivacy EventPrivacy
	Valid        bool // Valid is true if EventPrivacy is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventPrivacy) Scan(value interface{}) error {
	if value == nil {
		ns.EventPrivacy, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventPrivacy.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventPrivacy) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventPrivacy), nil
}

type EventStatus string

const (
	EventStatusPublished    EventStatus = "published"
	EventStatusNotPublished EventStatus = "not_published"
)

func (e *EventStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventStatus(s)
	case string:
		*e = EventStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EventStatus: %T", src)
	}
	return nil
}

type NullEventStatus struct {
	EventStatus EventStatus
	Valid       bool // Valid is true if EventStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EventStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventStatus), nil
}

type EventType string

const (
	EventTypeFree EventType = "free"
	EventTypePaid EventType = "paid"
)

func (e *EventType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EventType(s)
	case string:
		*e = EventType(s)
	default:
		return fmt.Errorf("unsupported scan type for EventType: %T", src)
	}
	return nil
}

type NullEventType struct {
	EventType EventType
	Valid     bool // Valid is true if EventType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEventType) Scan(value interface{}) error {
	if value == nil {
		ns.EventType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EventType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEventType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EventType), nil
}

type Interest string

const (
	InterestGoing    Interest = "going"
	InterestNotgoing Interest = "not going"
)

func (e *Interest) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Interest(s)
	case string:
		*e = Interest(s)
	default:
		return fmt.Errorf("unsupported scan type for Interest: %T", src)
	}
	return nil
}

type NullInterest struct {
	Interest Interest
	Valid    bool // Valid is true if Interest is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInterest) Scan(value interface{}) error {
	if value == nil {
		ns.Interest, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Interest.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInterest) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Interest), nil
}

type PaymentType string

const (
	PaymentTypeCash   PaymentType = "cash"
	PaymentTypeCrypto PaymentType = "crypto"
)

func (e *PaymentType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentType(s)
	case string:
		*e = PaymentType(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentType: %T", src)
	}
	return nil
}

type NullPaymentType struct {
	PaymentType PaymentType
	Valid       bool // Valid is true if PaymentType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentType) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentType), nil
}

type ResponseType string

const (
	ResponseTypeAccepted ResponseType = "accepted"
	ResponseTypeRejected ResponseType = "rejected"
	ResponseTypeNone     ResponseType = "none"
)

func (e *ResponseType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ResponseType(s)
	case string:
		*e = ResponseType(s)
	default:
		return fmt.Errorf("unsupported scan type for ResponseType: %T", src)
	}
	return nil
}

type NullResponseType struct {
	ResponseType ResponseType
	Valid        bool // Valid is true if ResponseType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullResponseType) Scan(value interface{}) error {
	if value == nil {
		ns.ResponseType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ResponseType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullResponseType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ResponseType), nil
}

type RoleType string

const (
	RoleTypeCreator      RoleType = "creator"
	RoleTypeOwner        RoleType = "owner"
	RoleTypeSponsor      RoleType = "sponsor"
	RoleTypeCollaborator RoleType = "collaborator"
	RoleTypeBeneficiary  RoleType = "beneficiary"
)

func (e *RoleType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoleType(s)
	case string:
		*e = RoleType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoleType: %T", src)
	}
	return nil
}

type NullRoleType struct {
	RoleType RoleType
	Valid    bool // Valid is true if RoleType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoleType) Scan(value interface{}) error {
	if value == nil {
		ns.RoleType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoleType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoleType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoleType), nil
}

type StatusType string

const (
	StatusTypeSent    StatusType = "sent"
	StatusTypeNotSent StatusType = "not_sent"
	StatusTypeExpired StatusType = "expired"
)

func (e *StatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StatusType(s)
	case string:
		*e = StatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for StatusType: %T", src)
	}
	return nil
}

type NullStatusType struct {
	StatusType StatusType
	Valid      bool // Valid is true if StatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.StatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StatusType), nil
}

type TicketType string

const (
	TicketTypeOnceUse    TicketType = "once_use"
	TicketTypeLimitedUse TicketType = "limited_use"
	TicketTypeTimePeriod TicketType = "time_period"
)

func (e *TicketType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TicketType(s)
	case string:
		*e = TicketType(s)
	default:
		return fmt.Errorf("unsupported scan type for TicketType: %T", src)
	}
	return nil
}

type NullTicketType struct {
	TicketType TicketType
	Valid      bool // Valid is true if TicketType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTicketType) Scan(value interface{}) error {
	if value == nil {
		ns.TicketType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TicketType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTicketType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TicketType), nil
}

type AuthProvider struct {
	ID           int32
	Name         string
	ClientID     string
	ClientSecret string
	AuthUrl      string
	TokenUrl     string
	Scope        sql.NullString
	RedirectUri  string
	Active       sql.NullBool
}

type CashPaymentOption struct {
	ID            int32
	EventID       uuid.UUID
	StripeAccount sql.NullString
	Price         string
}

type Chain struct {
	ID          int32
	Name        string
	Description sql.NullString
}

type CryptoPaymentOption struct {
	ID                          int32
	EventID                     uuid.UUID
	AddressType                 AddressType
	Wallet                      sql.NullString
	DistributionContractAddress sql.NullString
	ChainID                     int32
	NetworkID                   int32
}

type CryptoPaymentOptionToken struct {
	ID                    int32
	CryptoPaymentOptionID int32
	NetworkID             int32
	TokenID               int32
}

type Distribution struct {
	ID                    int32
	NetworkID             int32
	CryptoPaymentOptionID int32
	Description           sql.NullString
	CreatedAt             sql.NullTime
	UpdatedAt             sql.NullTime
}

type DistributionSplit struct {
	ID              int32
	DistributionID  int32
	WalletAddress   string
	Name            sql.NullString
	SplitPercentage string
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

type Event struct {
	ID                     uuid.UUID
	Name                   string
	Description            sql.NullString
	Type                   EventType
	Privacy                EventPrivacy
	Mode                   EventMode
	Country                sql.NullString
	City                   sql.NullString
	Coordinates            interface{}
	GoogleMapLink          sql.NullString
	LocationInstructions   sql.NullString
	VirtualMeetingPlatform sql.NullString
	VirtualMeetingLink     sql.NullString
	Capacity               sql.NullInt32
	StartTime              time.Time
	EndTime                time.Time
	ImageUrl               sql.NullString
	Status                 EventStatus
	CreatedAt              time.Time
	UpdatedAt              time.Time
}

type EventAttendee struct {
	ID       int32
	EventID  uuid.UUID
	UserID   uuid.UUID
	InviteID int32
	Attended sql.NullBool
}

type EventInterest struct {
	EventID   uuid.UUID
	UserID    uuid.UUID
	Interest  Interest
	CreatedAt time.Time
	UpdatedAt time.Time
}

type EventInvite struct {
	ID           int32
	EventID      uuid.UUID
	EmailAddress string
	SentEmail    time.Time
	Link         string
	Response     NullResponseType
	Status       StatusType
	Username     sql.NullString
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

type EventPart struct {
	ID   int32
	Name EventPartName
}

type EventPartsPermission struct {
	ID         int32
	PartID     int32
	Permission EventPartPermission
}

type EventUser struct {
	ID        int32
	EventID   uuid.UUID
	UserID    uuid.UUID
	Role      RoleType
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type EventUserPaymentOption struct {
	ID              int32
	EventUserID     int32
	PaymentOptionID int32
}

type EventUserPermission struct {
	ID           int32
	EventUserID  int32
	PermissionID int32
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

type EventUsersReq struct {
	ID        int32
	UserID    uuid.UUID
	EventID   uuid.UUID
	Role      RoleType
	Token     uuid.UUID
	Response  NullResponseType
	Split     sql.NullString
	ExpiresAt time.Time
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type Network struct {
	ID                          int32
	ChainID                     int32
	Name                        string
	DistributionContractAddress sql.NullString
}

type Session struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	CreatedAt    time.Time
	ExpiresAt    time.Time
	LastAccessed time.Time
	IpAddress    sql.NullString
	UserAgent    sql.NullString
}

type SocialLogin struct {
	ID                int32
	UserID            uuid.UUID
	ProviderID        int32
	ProviderUserID    string
	AccessToken       sql.NullString
	AccessTokenExpiry sql.NullTime
	RefreshToken      sql.NullString
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
}

type SocialMediaPlatform struct {
	PlatformID   int32
	ImageUrl     sql.NullString
	PlatformName string
}

type Ticket struct {
	ID         int32
	EventID    uuid.UUID
	Name       string
	TicketType TicketType
	Price      sql.NullString
	MaxScans   sql.NullInt32
	Capacity   sql.NullInt32
	ValidFrom  sql.NullTime
	ValidTo    sql.NullTime
}

type TicketCashPayment struct {
	CashPaymentOptionID int32
	TicketID            int32
}

type TicketCryptoPayment struct {
	CryptoPaymentOptionID int32
	TicketID              int32
}

type TicketPurchase struct {
	ID            uuid.UUID
	UserTicketID  int32
	PaymentType   PaymentType
	WalletAddress sql.NullString
	AccountNumber sql.NullString
	UserID        uuid.UUID
}

type Token struct {
	ID               int32
	Name             string
	DecimalPlacement int32
}

type TokenNetworkAddress struct {
	ID        int32
	TokenID   int32
	NetworkID int32
	Address   string
}

type User struct {
	ID               uuid.UUID
	Username         string
	Bio              sql.NullString
	Email            sql.NullString
	Password         sql.NullString
	IsEmailVerified  sql.NullBool
	SignupType       NullAccountType
	SubscriptionType string
	WalletLinked     sql.NullBool
	WalletLinkDate   sql.NullTime
	ProfileImageUrl  sql.NullString
	CoverImageUrl    sql.NullString
	MainWalletID     sql.NullInt32
	CreatedAt        time.Time
	UpdatedAt        time.Time
}

type UserEmail struct {
	ID          int32
	UserID      uuid.UUID
	Token       string
	ActionType  EmailActions
	ExpiryDate  time.Time
	IsCompleted bool
}

type UserFollow struct {
	ID         int32
	FollowerID uuid.UUID
	FolloweeID uuid.UUID
	FollowDate sql.NullTime
}

type UserPaymentOption struct {
	ID          int32
	UserID      uuid.UUID
	Name        sql.NullString
	PaymentType PaymentType
	CardID      sql.NullInt32
	WalletID    sql.NullInt32
}

type UserSocialMediaLink struct {
	LinkID     int32
	UserID     uuid.UUID
	PlatformID int32
	LinkUrl    string
}

type UserTicket struct {
	ID         int32
	TicketID   int32
	UserID     uuid.UUID
	TicketCode sql.NullString
	Scanned    sql.NullBool
	ScanCount  sql.NullInt32
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

type Wallet struct {
	ID            int32
	UserID        uuid.UUID
	WalletAddress string
	WalletName    string
	WalletIndex   int32
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ChainID       int32
}
